runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
col.trgt <- c(3)
col.trgt[1]
col.trgt[[1]]
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
c(3:6)
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
packageVerson("DT")
packageVersion("DT")
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
?switch
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='trentham3269', token='9DABAE346BC4290E3D82A71BE4FBC0C5', secret='5jWqqa+Zd3SXtkQZ7obNgja4KivAbbFoOr631vES')
library(rvest)
library(dplyr)
library(readr)
url <- "https://www.nraa.com.au/qra-queens-2016-results-2/"
# scrape scores as list
scores_scrape <- url %>%
read_html() %>%
html_nodes(xpath = '/html/body/div[1]/div[2]/div[3]/table') %>%
html_table(fill = T)
# return the only list element as data frame
scores <- scores_scrape[[1]]
# return only rows with score data
excl <- c("Target Rifle - A"
, "Target Rifle - B"
, "Target Rifle - C"
, "F Standard - A"
, "F Standard - B"
, "F Open - FO"
, "F/TR - A")
# shift initial grade down
scores$Row   <- row.names(scores)
scores$Grade <- lag(scores$Place, n = 1L)
# grade indexes
traRow <- grep(excl[1], scores$Grade)
trbRow <- grep(excl[2], scores$Grade)
trcRow <- grep(excl[3], scores$Grade)
fsaRow <- grep(excl[4], scores$Grade)
fsbRow <- grep(excl[5], scores$Grade)
fopRow <- grep(excl[6], scores$Grade)
ftrRow <- grep(excl[7], scores$Grade)
# fill grades
scores$Grade <- ifelse(as.integer(scores$Row) < trbRow, excl[1],
ifelse(as.integer(scores$Row) < trcRow, excl[2],
ifelse(as.integer(scores$Row) < fsaRow, excl[3],
ifelse(as.integer(scores$Row) < fsbRow, excl[4],
ifelse(as.integer(scores$Row) < fopRow, excl[5],
ifelse(as.integer(scores$Row) < ftrRow, excl[6],
excl[7]))))))
# select columns
scores %>%
select(Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score)%>%
mutate(Year = as.character(readline("Enter year:"))) %>%
mutate(Championship = readline("Enter Association eg. NRAA:")) %>%
mutate(Match = readline("Enter Leadup, Queens or Grand:")) %>%
select(Year
, Championship
, Match
, Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score) %>%
filter(!(Place %in% excl)) ->
scores2
View(scores2)
write_csv(scores2, "~/Documents/Repos/shinyApps/nraaResults/nraaResults.csv", append = TRUE)
# scrape scores as list
scores_scrape <- url %>%
read_html() %>%
html_nodes(xpath = '/html/body/div[1]/div[2]/div[2]/table') %>%
html_table(fill = T)
# return the only list element as data frame
scores <- scores_scrape[[1]]
# return only rows with score data
excl <- c("Target Rifle - A"
, "Target Rifle - B"
, "Target Rifle - C"
, "F Standard - A"
, "F Standard - B"
, "F Open - FO"
, "F/TR - A")
# shift initial grade down
scores$Row   <- row.names(scores)
scores$Grade <- lag(scores$Place, n = 1L)
# grade indexes
traRow <- grep(excl[1], scores$Grade)
trbRow <- grep(excl[2], scores$Grade)
trcRow <- grep(excl[3], scores$Grade)
fsaRow <- grep(excl[4], scores$Grade)
fsbRow <- grep(excl[5], scores$Grade)
fopRow <- grep(excl[6], scores$Grade)
ftrRow <- grep(excl[7], scores$Grade)
# fill grades
scores$Grade <- ifelse(as.integer(scores$Row) < trbRow, excl[1],
ifelse(as.integer(scores$Row) < trcRow, excl[2],
ifelse(as.integer(scores$Row) < fsaRow, excl[3],
ifelse(as.integer(scores$Row) < fsbRow, excl[4],
ifelse(as.integer(scores$Row) < fopRow, excl[5],
ifelse(as.integer(scores$Row) < ftrRow, excl[6],
excl[7]))))))
# select columns
scores %>%
select(Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score)%>%
mutate(Year = as.character(readline("Enter year:"))) %>%
mutate(Championship = readline("Enter Association eg. NRAA:")) %>%
mutate(Match = readline("Enter Leadup, Queens or Grand:")) %>%
select(Year
, Championship
, Match
, Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score) %>%
filter(!(Place %in% excl)) ->
scores2
View(scores2)
write_csv(scores2, "~/Documents/Repos/shinyApps/nraaResults/nraaResults.csv", append = TRUE)
# scrape scores as list
scores_scrape <- url %>%
read_html() %>%
html_nodes(xpath = '/html/body/div[1]/div[2]/div[1]/table') %>%
html_table(fill = T)
# return the only list element as data frame
scores <- scores_scrape[[1]]
# return only rows with score data
excl <- c("Target Rifle - A"
, "Target Rifle - B"
, "Target Rifle - C"
, "F Standard - A"
, "F Standard - B"
, "F Open - FO"
, "F/TR - A")
# shift initial grade down
scores$Row   <- row.names(scores)
scores$Grade <- lag(scores$Place, n = 1L)
# grade indexes
traRow <- grep(excl[1], scores$Grade)
trbRow <- grep(excl[2], scores$Grade)
trcRow <- grep(excl[3], scores$Grade)
fsaRow <- grep(excl[4], scores$Grade)
fsbRow <- grep(excl[5], scores$Grade)
fopRow <- grep(excl[6], scores$Grade)
ftrRow <- grep(excl[7], scores$Grade)
# fill grades
scores$Grade <- ifelse(as.integer(scores$Row) < trbRow, excl[1],
ifelse(as.integer(scores$Row) < trcRow, excl[2],
ifelse(as.integer(scores$Row) < fsaRow, excl[3],
ifelse(as.integer(scores$Row) < fsbRow, excl[4],
ifelse(as.integer(scores$Row) < fopRow, excl[5],
ifelse(as.integer(scores$Row) < ftrRow, excl[6],
excl[7]))))))
# select columns
scores %>%
select(Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score)%>%
mutate(Year = as.character(readline("Enter year:"))) %>%
mutate(Championship = readline("Enter Association eg. NRAA:")) %>%
mutate(Match = readline("Enter Leadup, Queens or Grand:")) %>%
select(Year
, Championship
, Match
, Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score) %>%
filter(!(Place %in% excl)) ->
scores2
View(scores2)
write_csv(scores2, "~/Documents/Repos/shinyApps/nraaResults/nraaResults.csv", append = TRUE)
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
url <- "https://www.nraa.com.au/nswra-140th-open-championships-2016-nsw-results/"
# scrape scores as list
scores_scrape <- url %>%
read_html() %>%
html_nodes(xpath = '/html/body/div[1]/div[2]/div[14]/table') %>%
html_table(fill = T)
# return the only list element as data frame
scores <- scores_scrape[[1]]
# return only rows with score data
excl <- c("Target Rifle - A"
, "Target Rifle - B"
, "Target Rifle - C"
, "F Standard - A"
, "F Standard - B"
, "F Open - FO"
, "F/TR - A")
# shift initial grade down
scores$Row   <- row.names(scores)
scores$Grade <- lag(scores$Place, n = 1L)
# grade indexes
traRow <- grep(excl[1], scores$Grade)
trbRow <- grep(excl[2], scores$Grade)
trcRow <- grep(excl[3], scores$Grade)
fsaRow <- grep(excl[4], scores$Grade)
fsbRow <- grep(excl[5], scores$Grade)
fopRow <- grep(excl[6], scores$Grade)
ftrRow <- grep(excl[7], scores$Grade)
# fill grades
scores$Grade <- ifelse(as.integer(scores$Row) < trbRow, excl[1],
ifelse(as.integer(scores$Row) < trcRow, excl[2],
ifelse(as.integer(scores$Row) < fsaRow, excl[3],
ifelse(as.integer(scores$Row) < fsbRow, excl[4],
ifelse(as.integer(scores$Row) < fopRow, excl[5],
ifelse(as.integer(scores$Row) < ftrRow, excl[6],
excl[7]))))))
# select columns
scores %>%
select(Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score)%>%
mutate(Year = as.character(readline("Enter year:"))) %>%
mutate(Championship = readline("Enter Association eg. NRAA:")) %>%
mutate(Match = readline("Enter Leadup, Queens or Grand:")) %>%
select(Year
, Championship
, Match
, Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score) %>%
filter(!(Place %in% excl)) ->
scores2
View(scores2)
write_csv(scores2, "~/Documents/Repos/shinyApps/nraaResults/nraaResults.csv", append = TRUE)
# scrape scores as list
scores_scrape <- url %>%
read_html() %>%
html_nodes(xpath = '/html/body/div[1]/div[2]/div[2]/table') %>%
html_table(fill = T)
# return the only list element as data frame
scores <- scores_scrape[[1]]
# return only rows with score data
excl <- c("Target Rifle - A"
, "Target Rifle - B"
, "Target Rifle - C"
, "F Standard - A"
, "F Standard - B"
, "F Open - FO"
, "F/TR - A")
# shift initial grade down
scores$Row   <- row.names(scores)
scores$Grade <- lag(scores$Place, n = 1L)
# grade indexes
traRow <- grep(excl[1], scores$Grade)
trbRow <- grep(excl[2], scores$Grade)
trcRow <- grep(excl[3], scores$Grade)
fsaRow <- grep(excl[4], scores$Grade)
fsbRow <- grep(excl[5], scores$Grade)
fopRow <- grep(excl[6], scores$Grade)
ftrRow <- grep(excl[7], scores$Grade)
# fill grades
scores$Grade <- ifelse(as.integer(scores$Row) < trbRow, excl[1],
ifelse(as.integer(scores$Row) < trcRow, excl[2],
ifelse(as.integer(scores$Row) < fsaRow, excl[3],
ifelse(as.integer(scores$Row) < fsbRow, excl[4],
ifelse(as.integer(scores$Row) < fopRow, excl[5],
ifelse(as.integer(scores$Row) < ftrRow, excl[6],
excl[7]))))))
# select columns
scores %>%
select(Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score)%>%
mutate(Year = as.character(readline("Enter year:"))) %>%
mutate(Championship = readline("Enter Association eg. NRAA:")) %>%
mutate(Match = readline("Enter Leadup, Queens or Grand:")) %>%
select(Year
, Championship
, Match
, Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score) %>%
filter(!(Place %in% excl)) ->
scores2
View(scores2)
write_csv(scores2, "~/Documents/Repos/shinyApps/nraaResults/nraaResults.csv", append = TRUE)
# scrape scores as list
scores_scrape <- url %>%
read_html() %>%
html_nodes(xpath = '/html/body/div[1]/div[2]/div[1]/table') %>%
html_table(fill = T)
# return the only list element as data frame
scores <- scores_scrape[[1]]
# return only rows with score data
excl <- c("Target Rifle - A"
, "Target Rifle - B"
, "Target Rifle - C"
, "F Standard - A"
, "F Standard - B"
, "F Open - FO"
, "F/TR - A")
# shift initial grade down
scores$Row   <- row.names(scores)
scores$Grade <- lag(scores$Place, n = 1L)
# grade indexes
traRow <- grep(excl[1], scores$Grade)
trbRow <- grep(excl[2], scores$Grade)
trcRow <- grep(excl[3], scores$Grade)
fsaRow <- grep(excl[4], scores$Grade)
fsbRow <- grep(excl[5], scores$Grade)
fopRow <- grep(excl[6], scores$Grade)
ftrRow <- grep(excl[7], scores$Grade)
# fill grades
scores$Grade <- ifelse(as.integer(scores$Row) < trbRow, excl[1],
ifelse(as.integer(scores$Row) < trcRow, excl[2],
ifelse(as.integer(scores$Row) < fsaRow, excl[3],
ifelse(as.integer(scores$Row) < fsbRow, excl[4],
ifelse(as.integer(scores$Row) < fopRow, excl[5],
ifelse(as.integer(scores$Row) < ftrRow, excl[6],
excl[7]))))))
# select columns
scores %>%
select(Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score)%>%
mutate(Year = as.character(readline("Enter year:"))) %>%
mutate(Championship = readline("Enter Association eg. NRAA:")) %>%
mutate(Match = readline("Enter Leadup, Queens or Grand:")) %>%
select(Year
, Championship
, Match
, Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score) %>%
filter(!(Place %in% excl)) ->
scores2
View(scores2)
write_csv(scores2, "~/Documents/Repos/shinyApps/nraaResults/nraaResults.csv", append = TRUE)
runApp('Documents/Repos/shinyApps/nraaResults')
runApp('Documents/Repos/shinyApps/nraaResults')
url <- "https://www.nraa.com.au/the-canberra-queens-prize-2016-act-results/"
# scrape scores as list
scores_scrape <- url %>%
read_html() %>%
html_nodes(xpath = '/html/body/div[1]/div[2]/div[15]/table') %>%
html_table(fill = T)
# return the only list element as data frame
scores <- scores_scrape[[1]]
# return only rows with score data
excl <- c("Target Rifle - A"
, "Target Rifle - B"
, "Target Rifle - C"
, "F Standard - A"
, "F Standard - B"
, "F Open - FO"
, "F/TR - A")
# shift initial grade down
scores$Row   <- row.names(scores)
scores$Grade <- lag(scores$Place, n = 1L)
# grade indexes
traRow <- grep(excl[1], scores$Grade)
trbRow <- grep(excl[2], scores$Grade)
trcRow <- grep(excl[3], scores$Grade)
fsaRow <- grep(excl[4], scores$Grade)
fsbRow <- grep(excl[5], scores$Grade)
fopRow <- grep(excl[6], scores$Grade)
ftrRow <- grep(excl[7], scores$Grade)
# fill grades
scores$Grade <- ifelse(as.integer(scores$Row) < trbRow, excl[1],
ifelse(as.integer(scores$Row) < trcRow, excl[2],
ifelse(as.integer(scores$Row) < fsaRow, excl[3],
ifelse(as.integer(scores$Row) < fsbRow, excl[4],
ifelse(as.integer(scores$Row) < fopRow, excl[5],
ifelse(as.integer(scores$Row) < ftrRow, excl[6],
excl[7]))))))
# select columns
scores %>%
select(Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score)%>%
mutate(Year = as.character(readline("Enter year:"))) %>%
mutate(Championship = readline("Enter Association eg. NRAA:")) %>%
mutate(Match = readline("Enter Leadup, Queens or Grand:")) %>%
select(Year
, Championship
, Match
, Grade
, Place
, `Last Name`
, `Preferred Name`
, Club
, State
, Info
, Score) %>%
filter(!(Place %in% excl)) ->
scores2
nraa <- read_csv("nraaResults.csv")
wd <- "~/Documents/Repos/shinyApps/nraaResults/"
setwd(wd)
nraa <- read_csv("nraaResults.csv")
View(nraa)
nraa$Championship <- ifelse(nraa$Championship == "ACT", "ACTRA", nraa$Championship)
write_csv(nraa, "~/Documents/Repos/shinyApps/nraaResults/nraaResults.csv")
runApp()
runApp()
View(scores2)
str(nraa)
nraa2 <- read.csv("nraaResults.csv")
str(nraa2)
?read.csv
runApp()
names(nraa2)
dim(nraa2)
nraa2 <- read.csv("nraaResults.csv", colClasses = "character")
str(nraa2)
?read_csv
nraa <- read_csv("nraaResults.csv", col_types = "c")
nraa <- read_csv("nraaResults.csv", col_types = "ccccccccccc")
str(nraa)
str(df)
runApp()
str(df)
View(df)
runApp()
str(df)
runApp()
library(rsconnect)
rsconnect::deployApp('~/Documents/Repos/shinyApps/nraaResults/')
rsconnect::deployApp('~/Documents/Repos/shinyApps/nraaResults/')
rsconnect::deployApp()
rsconnect::deployApp()
runApp()
rsconnect::deployApp('~/Documents/Repos/shinyApps/nraaResults/')
